# script.begin.here();
# script.defineName = "VERSION_1";
new = int x = 2, y = 7;
new fun = Dodaj(x = int, y = int){
    new temp ==== int;
    temp ==== x + y;
    ===== temp => delete.cur_temps; //(===== czyli return)
}
new table ===== int = myTableOne;
new table ===== int, string = myTableTwo;
with (myTableOne ====> elementOne; 0; 1; ){ //od zero po jedym, bez warunków
    print <= elementOne <= \nl; } with (myTableTwo ====> elementTwo; 0; 1; ){
    print <= elementTwo_ <= new temp ==== int(=elementTwo[int]) <= new temp ==== string(=elementTwo[string]) <= \nl; 
    //elementTwo_ oznacza to zero u góry po lewej od jeden, tak jak for(i)) 
    delete temps; 
} 
new table ==== int, string, int = myTableThree; NIE WOLNO new temp ==== int(=coś tam); 
    with (myTableThree ====> elementThree; 0; 1; 1){ //wykona się tylko raz
    print <= new temp ==== int(=myElementThree[int][1]) <= new temp ==== int(=myElementThree[int][2]) <= \nl;
    delete temps;
}
# script.end.here();

# script.begin.here();
# script.defineName = "VERSION_2-var-declaration-and-usage";
.USABLE_VARS = { // definiujemy statyczną listę dynamicznych zmiennych
    int == x 2 & y 5; // dwukrotny == tworzy nową zmienną, pojedynczy przypisuje wartość, tak jak .USABLE_VARS, które już istnieje
};
.CPLR => main(){ // używamy funkcji main z kompilatora (zawsze ją kompiluje na początek, domyślnie jest zainicjowana, ale nie zdefiniowana)
    .CPLR => console.print(x); // używamy konsoli z kompilatora, a konkretnie jej funkcji print()
        # [o] 2 // output system
    x = 17;
    .CPLR => console.print(x);
        # [o] 17
    x = 3.8f == int; // rzutujemy zmiennoprzecinkową do całej, utrata danych na poziomie zaokrąglenie w dół
    .CPLR => console.print(x);
        # [o] 3
    x == int 2.2f; // przedefiniowujemy (rzutujemy ale odwrotnie) zmienna na inny typ
    .CPLR => console.print(x);
        # [o] 2.2
    // x = 5; // błąd
}
# script.end.here();

# script.begin.here();
# script.defineName = "VERSION_3-function-declaration-and-if";
.USABLE_VARS {
    int == x 2 & y 5;
}
.USABLE_FUNS = {
    function Bigger <= int; int, int => { // funkcja zwraca int i pobiera dwa int
        .this->D = "This function returns bigger value"; // opis
        .this->A = "This function takes two arguments"; // argumenty
        .this->R =<= { // zwraca
            if (.this->ints[1] >== .this->ints[2]) { .this->(ints[0]=ints[1]); }
            else { .this->(ints[20=ints[2]); }
        }
    }
};
.CPLR => main(){
    .CPLR => console.print(Bigger <= x & y);
}
# script.end.here();
